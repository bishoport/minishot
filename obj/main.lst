                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.6.8 #9946 (Linux)
                              4 ;--------------------------------------------------------
                              5 	.module main
                              6 	.optsdcc -mz80
                              7 	
                              8 ;--------------------------------------------------------
                              9 ; Public variables in this module
                             10 ;--------------------------------------------------------
                             11 	.globl _main
                             12 	.globl _drawShoot
                             13 	.globl _drawEnemy
                             14 	.globl _drawPlayer
                             15 	.globl _cpct_getScreenPtr
                             16 	.globl _cpct_setPALColour
                             17 	.globl _cpct_setPalette
                             18 	.globl _cpct_setVideoMode
                             19 	.globl _cpct_drawSprite
                             20 	.globl _cpct_disableFirmware
                             21 ;--------------------------------------------------------
                             22 ; special function registers
                             23 ;--------------------------------------------------------
                             24 ;--------------------------------------------------------
                             25 ; ram data
                             26 ;--------------------------------------------------------
                             27 	.area _DATA
                             28 ;--------------------------------------------------------
                             29 ; ram data
                             30 ;--------------------------------------------------------
                             31 	.area _INITIALIZED
                             32 ;--------------------------------------------------------
                             33 ; absolute external ram data
                             34 ;--------------------------------------------------------
                             35 	.area _DABS (ABS)
                             36 ;--------------------------------------------------------
                             37 ; global & static initialisations
                             38 ;--------------------------------------------------------
                             39 	.area _HOME
                             40 	.area _GSINIT
                             41 	.area _GSFINAL
                             42 	.area _GSINIT
                             43 ;--------------------------------------------------------
                             44 ; Home
                             45 ;--------------------------------------------------------
                             46 	.area _HOME
                             47 	.area _HOME
                             48 ;--------------------------------------------------------
                             49 ; code
                             50 ;--------------------------------------------------------
                             51 	.area _CODE
                             52 ;src/main.c:23: void drawPlayer(){
                             53 ;	---------------------------------
                             54 ; Function drawPlayer
                             55 ; ---------------------------------
   0000                      56 _drawPlayer::
                             57 ;src/main.c:24: u8 *pvmen = cpct_getScreenPtr(CPCT_VMEM_START,PLAYER_X,PLAYER_Y);
   0000 21 25 B8      [10]   58 	ld	hl, #0xb825
   0003 E5            [11]   59 	push	hl
   0004 21 00 C0      [10]   60 	ld	hl, #0xc000
   0007 E5            [11]   61 	push	hl
   0008 CDr00r00      [17]   62 	call	_cpct_getScreenPtr
                             63 ;src/main.c:25: cpct_drawSprite(sp_player_ship,pvmen,SP_PLAYER_SHIP_W,SP_PLAYER_SHIP_H);
   000B 01r00r00      [10]   64 	ld	bc, #_sp_player_ship+0
   000E 11 08 10      [10]   65 	ld	de, #0x1008
   0011 D5            [11]   66 	push	de
   0012 E5            [11]   67 	push	hl
   0013 C5            [11]   68 	push	bc
   0014 CDr00r00      [17]   69 	call	_cpct_drawSprite
   0017 C9            [10]   70 	ret
                             71 ;src/main.c:28: void drawEnemy(){
                             72 ;	---------------------------------
                             73 ; Function drawEnemy
                             74 ; ---------------------------------
   0018                      75 _drawEnemy::
                             76 ;src/main.c:29: u8 *pvmen = cpct_getScreenPtr(CPCT_VMEM_START,ENEMY_X,ENEMY_Y);
   0018 21 48 0A      [10]   77 	ld	hl, #0x0a48
   001B E5            [11]   78 	push	hl
   001C 21 00 C0      [10]   79 	ld	hl, #0xc000
   001F E5            [11]   80 	push	hl
   0020 CDr00r00      [17]   81 	call	_cpct_getScreenPtr
                             82 ;src/main.c:30: cpct_drawSprite(sp_enemy_ship,pvmen,SP_ENEMY_SHIP_W,SP_ENEMY_SHIP_H);
   0023 01r00r00      [10]   83 	ld	bc, #_sp_enemy_ship+0
   0026 11 08 10      [10]   84 	ld	de, #0x1008
   0029 D5            [11]   85 	push	de
   002A E5            [11]   86 	push	hl
   002B C5            [11]   87 	push	bc
   002C CDr00r00      [17]   88 	call	_cpct_drawSprite
   002F C9            [10]   89 	ret
                             90 ;src/main.c:33: void drawShoot(){
                             91 ;	---------------------------------
                             92 ; Function drawShoot
                             93 ; ---------------------------------
   0030                      94 _drawShoot::
                             95 ;src/main.c:34: u8 *pvmen = cpct_getScreenPtr(CPCT_VMEM_START,SHOT_X,SHOT_Y);
   0030 21 25 A8      [10]   96 	ld	hl, #0xa825
   0033 E5            [11]   97 	push	hl
   0034 21 00 C0      [10]   98 	ld	hl, #0xc000
   0037 E5            [11]   99 	push	hl
   0038 CDr00r00      [17]  100 	call	_cpct_getScreenPtr
                            101 ;src/main.c:35: cpct_drawSprite(sp_shoot,pvmen,SP_SHOOT_W,SP_SHOOT_H);
   003B 01r00r00      [10]  102 	ld	bc, #_sp_shoot+0
   003E 11 08 10      [10]  103 	ld	de, #0x1008
   0041 D5            [11]  104 	push	de
   0042 E5            [11]  105 	push	hl
   0043 C5            [11]  106 	push	bc
   0044 CDr00r00      [17]  107 	call	_cpct_drawSprite
   0047 C9            [10]  108 	ret
                            109 ;src/main.c:39: void main(void) {
                            110 ;	---------------------------------
                            111 ; Function main
                            112 ; ---------------------------------
   0048                     113 _main::
                            114 ;src/main.c:41: cpct_disableFirmware(); //Dejamos de ejecutar el Firmware default del Amstrad (todo bajo nuestro control)
   0048 CDr00r00      [17]  115 	call	_cpct_disableFirmware
                            116 ;src/main.c:42: cpct_setVideoMode(0); //Ponemos el Modo de video 0 (4 colores)
   004B 2E 00         [ 7]  117 	ld	l, #0x00
   004D CDr00r00      [17]  118 	call	_cpct_setVideoMode
                            119 ;src/main.c:43: cpct_setPalette(g_palette,16);
   0050 21 10 00      [10]  120 	ld	hl, #0x0010
   0053 E5            [11]  121 	push	hl
   0054 21r00r00      [10]  122 	ld	hl, #_g_palette
   0057 E5            [11]  123 	push	hl
   0058 CDr00r00      [17]  124 	call	_cpct_setPalette
                            125 ;src/main.c:44: cpct_setBorder(HW_BLACK); //Colores por defecto del sistema
   005B 21 10 14      [10]  126 	ld	hl, #0x1410
   005E E5            [11]  127 	push	hl
   005F CDr00r00      [17]  128 	call	_cpct_setPALColour
                            129 ;src/main.c:49: drawPlayer();
   0062 CDr00r00      [17]  130 	call	_drawPlayer
                            131 ;src/main.c:50: drawEnemy();
   0065 CDr18r00      [17]  132 	call	_drawEnemy
                            133 ;src/main.c:51: drawShoot();
   0068 CDr30r00      [17]  134 	call	_drawShoot
                            135 ;src/main.c:53: while (TRUE);
   006B                     136 00102$:
   006B 18 FE         [12]  137 	jr	00102$
                            138 	.area _CODE
                            139 	.area _INITIALIZER
                            140 	.area _CABS (ABS)
